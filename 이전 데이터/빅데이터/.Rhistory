array(1:8 , dim = c(2,2,2))
?factor
factor("s" , levels = ("s" , "e" , "x") , labels = ("s"))
factor("s" , levels = ("s" , "e" , "x") , labels = ("s" , "e", "x"))
factor("s" , levels = c("s" , "e" , "x") , labels = c("s" , "e", "x"))
factor("s" , levels = c("s" , "e" , "x") , labels = c("s"))
factor("s" , levels = c("s" , "e" , "x") , labels = c("s" , "e" , "x"))
x = data.frame(s = c("a","b","c") , d = c("f","g","h"))
x
y = data.frame(s = c("a1","a2") , d = ("s","e"))
y = data.frame(s = c("a1","a2") , d = c("s","e"))
t
y
rbind(x,y)
func_p = function(x){}
func_p = function(x){
print(x)
}
func_p("섹스")
?plot
plot(iris$Petal.Length)
plot(x= iris$Petal.Length , y = iris$Petal.Width)
plot(x= iris$Petal.Length , y = iris$Petal.Width , xlab = "length" , ylab = "width")
plot(x= iris$Petal.Length , y = iris$Petal.Width , xlab = "length" , ylab = "width" , main = "l and w")
length = iris$Petal.Length
length
hist(length)
hist(length , breaks = 5)
barplot(length)
table(iris$Species)
iris$Species
pie(length)
boxplot(length)
boxplot(iris$Sepal.Length~iris$Species)
install.packages("ggplot2")
library(ggplot2)
ggplot(dimaonds , aes(color)) + geom_bar()
ggplot(diamaonds , aes(color)) + geom_bar()
diamonds
ggplot(diamonds , aes(color)) + geom_bar()
ggplot(diamonds , aes(color)) + geom_point()
ggplot(sleep , aes(color)) + geom_point()
ggplot(sleep , aes(x = ID , y = extra)) + geom_point()
df = read.table(file = "metamask.txt")
df
write.table(iris,file = "write.txt")
read.csv(file = "a.csv")
read.csv(file = "a.csv")
read.csv(file = "a.csv",header = TRUE)
install.packages("readxl")
library(readxl)
data = read_excel("a.xlsx")
data
View(data)
data = read_excel("a.xlsx" , col_names = TRUE)
write.xlsx(data , "a.xlsx")
install.packages(openxlsx)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(data , "a.xlsx")
write.xlsx(data , "a.xlsx" , append = FALSE)
write.xlsx(data , "b.xlsx" , append = FALSE)
install.packages("plyt")
install.packages("plyr")
library(plyr)
adply(iris , 1 , fuction(row){row$Sepal.Length >= 5.0 & row$Species = "setosa"})
adply(iris , 1 , fuction (row) { row$Sepal.Length >= 5.0 & row$Species = "setosa" })
adply(iris,1 , fuction (row) { row$Sepal.Length >=5.0 &})
adply(iris,1 , fuction (row) { row$Sepal.Length >=5.0 &
})
adply(iris,1 , fuction (row) { row$Sepal.Length >=5.0 &row$Species == "setosa"})
score = c(1,1,1000)
name = c("a" , "b" , "c")
df_score = data.frame(score,name)
df_score
esd = function(x){
return(abs(x-mean(x)) / sd(x) < 3)
}
library(dplyr)
df_score %>% filter(esd(score))
box_score = boxplot(df_score$score)
box_score$out
box_score$stats
data = c(1,3,5,7,9)
data_minmax = scale(data, center = 1 , scale = 9)
data_minmax
install.packages("caret")
install.packages("caret")
library(caret)
createDataPartion()
install.packages('caret')
install.packages('caret')
library(caret)
ds = createDataPartition(iris$Species , times = 1, p = 0.8)
ds
idx = as.vector(ds$Resample1)
idx
-idx
ds_train = iris[idx,]
ds_test = iris[-idx,]
ds_test
?mean
mean(cars$speed)
x = c(2,1,1,3,1)
y = table(x)
y
x
y
max(y)
names(y)[which(y == max(y))]
library(dplyr)
cars %>%
arange(dist)
cars %>%
arrange(dist)
dist
cars$dist
cars %>%
arrange(dist) %>%
mutate(rank = row_number(dist))
mtcars$cyl
str(mtcars)
prop_table = prop.table(table(mtcars$label_am , mtcars$cyl))*100
?table
cor(mtcars$mpg , mtcars$wt)
aggregate(mpg~cyl , data = mtcars , FUN = mean)
install.packages("mlbench")
library(mlbench)
c(3:5,8)
data("PimaIndiansDiabetes")
df_pima = PimaIndiansDiabetes[c(3:5,8)]
df_pima
str(df_pima)
summary(df_pima)
install.packages('corrplot')
library(corrplot)
windows(width = 12,height = 10)
windows(width = 12,height = 10)
corrplot(cor(df_pima) , method = "circle" , type= "lower")
data(mtcars)
m1 = lm(hp~.,data= mtcars)
m2 = step(m1,direction = "both")
formula(m2)
iris
iris_pca = princomp(
iris[,-5],cor = FALSE , scores = TRUE
)
iris_pca
summary(iris_pca)
plot(iris_pca)
iris_pca$loadings
biplot(iris_pca)
biplot(iris_pca , scale =0)
summary(lm(Salary,PutOuts,data = Hitters))
data(Hitters)
install.packages("ModelMetrics")
library(ModelMetrics)
install.packages("ISLR")
library(ISLR)
str(Default)
head(Default)
bankruptcy = Default
set.seed(202012)
train_idx = sample(1:nrow(baknruptcy) , size = 0.8 *nrow(bankruptcy) , replace = FALSE)
train_idx = sample(1:nrow(bakruptcy) , size = 0.8 *nrow(bankruptcy) , replace = FALSE)
train_idx = sample(1:nrow(bankruptcy) , size = 0.8 *nrow(bankruptcy) , replace = FALSE)
train_idx
test_idx = -(train_idx)
test_idx
b_train = bankruptcy[trin_idx]
b_train = bankruptcy[train_idx]
b_train
b_train = bankruptcy[train_idx,]
b_test = bankruptcy[test_idx,]
model = glm(default~. , family = binomial , data = b_train)
s_model = step(model , direction = "both")
summary(s_model)
vif(s_model)
install.packages("car")
library(car)
vif(s_model)
b_test[<]
b_test[,]
b_test[,-1]
pred = predict(s_model, newdat = b_test[,-1],type = "response")
df_pred = as.data.frame(pred)
pred
head(df_pred)
df_pred$default = ifelse(df_pred$pred >=0.5 , df_pred$default = 'Y' , df_pred$default = 'N')
df_pred$default = ifelse(df_pred$pred >=0.5 , df_pred$default = "Y" , df_pred$default = "N")
df_pred$pred
df_pred$default = ifelse(df_pred$pred >=0.5 , df_pred$default = "Y" , df_pred$default = "N")
df_pred$default = ifelse(df_pred$pred >=0.5 , df_pred$default <- "Y" , df_pred$default <- "N")
head(df_pred)
df_pred$default = as.factor(df_pred$default)
head(df_pred)
auc(actual = b_test[,1] , predicted = df_pred$default)
help(lm)
str(iris)
is.na(iris)
library(rpart)
md = rpart(Species~. , data = iris)
md
plot(md)
la(ms)
ls(md)
tree_pred = predict(md,newdata = iris,type = 'class')
library(caret)
tree_pred
confusionMatrix (tree_pred , reference = iris$Species)
install.packages(nnet)
install.packages(nnet)
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
library(nnet)
library(e1071)
train_data = sample(1:150, size = 100)
train_data
naive_model = naiveBayes(Species ~. , data = iris , subset = train_data)
naive_model
pred = predict(naive_model , newdata = iris)
confusionMatrix(pred , reference = iris$Species)
library(caret)
confusionMatrix(pred , reference = iris$Species)
library(xgboost)
install.packages('xgboost')
library(xgboost)
library(randomForest)
install.packages('randomForest')
Us.dist_euc = dist(USArrests , 'euclidean')
US
Us.dist_euc
install.packages('rattle')
library(rattle)
install.packages('NbcClust')
install.packages('NbClust')
library(NbClust)
wine
df = scale(wine[-1])
df
set.seed(1234)
km = kmeans(df,3,nstart =25)
km
km$size
library(mlbench)
data("BostonHousing")
data
data = BostonHousing
data
head(BostonHousing)
head(data)
?sort
help(sort)
head(sort(data$crim,decreasing = FALSE),10)
head(sort(data$crim,decreasing = TRUE),10)
top10 = head(sort(data$crim,decreasing = TRUE),10)
top10
tenth = top10[10]
tenth
data$crim = ifelse(data$crim>=tenth , tenth,data$crim)
head(data,10)
head(sort(data$crim,decreasing = TRUE),10)
library(dlpyr)
library(dplyr)
data >%> filter(data$age>=80)
data >%> filter(age>=80)
data
data %>% filter(age >=80)
over80 = data %>% filter(age >=80)
mean(over80$crim)
print(over80$crim)
print(mean(over80$crim))
Bostn
Boston
Boston = BostonHousing
Boston
head(Boston)
idx = sample(x= c('tr','te') , size = nrows(Boston),replace=TRUE , prob = c(0.8,0.2))
idx = sample(x= c('tr','te') , size = nrow(Boston),replace=TRUE , prob = c(0.8,0.2))
ds_train = Boston[(idx == 'tr')]
ds_train = Boston[(idx == 'tr'),]
ds_test = Boston[(idx == 'te'),]
ds_train
head(df_train)
head(ds_train)
medain_train = medain(ds_train$tax)
?median
library(median)
medain_train = median(ds_train$tax)
medain_trai
medain_train
pre_sd = sd(ds_train$tax)
pre_sd
ds_train$tax[is.na(ds_train$tax)] = medain_train
aft_sd = sd(ds_train$tax)
aft_sd
diff_sd = abs(aft_sd-pre_sd)
print(diff_sd)
ins = read.csv('insurance.csv' , stringsAsFactors = FALSE)
ins
head(ins)
mean_ins = mean(ins$charges)
sd_ins = sd(ins$charges)
upper = mean_ins +1.5 *sd_ins
lower = mean_ins -1.5 * sd_ins
upper
lower
length(ins)
length(ins[,])
ins
ins[1]$charges
ins[1,]$charges
help(for)
for (i in 1:nrow(ins)){
sum <-0
if(ins[i,]$charges <= lower | ins[i,]$charges >=upper)
{
sum+=ins[i,]$charges
}
}
for (i in 1:nrow(ins)){
if(ins[i,]$charges <= lower | ins[i,]$charges >=upper)
{
sum+=ins[i,]$charges
}
}
sum <-0
for (i in 1:nrow(ins)){
if(ins[i,]$charges <= lower | ins[i,]$charges >=upper)
{
sum+=ins[i,]$charges
}
}
for (i in 1:nrow(ins)){
if(ins[i,]$charges <= lower | ins[i,]$charges >=upper)
{
sum= sum +ins[i,]$charges
}
}
sum
train = read.csv('train.csv')
head(train)
as.csv(train)
help("write.csv")
airquality
head(airquality)
na.omit(airquality$Solar.R)
airquality
head(airquality)
air = na.omit(airquality$Solar.R)
head(air)
air
air = airquality %>% filter(!is.na(Solar.R))
air
head(air)
medain_ozone = median(air$Ozone)
medain_ozone
medain_ozone = median(air$Ozone , na.rm = TRUE)
medain_ozone
before_sd = sd(air$Ozone , na.rm = TRUE)
before_sd
air$Ozone = ifelse(is.na(air$Ozone) , medain_ozone , air$Ozone)
after_sd= sd (air$Ozone)
print(abs(after_sd - before_sd))
head(Hitter)
head(Hitters)
library(ISLR)
head(Hitters)
data = Hitters
summary(data$Salary)
library(ggplot2)
library(dplyr)
data(diamonds)
ds = diamonds
head(ds)
dim(ds)
nrow = dim(ds)[1] *0.8
nrow
train  = ds[train,]
train  = ds[1:train,]
train  = ds[c(1:train),]
nrow
train  = ds[c(1:nrow),]
help(sort)
help(arrange)
?arrange
srt = train %>% arrange(desc(price))
srt100 = head(srt,100)
result = mean(srt100$price)
print(result)
air = airquality[(1:nrow(airquality) *0.9),]
summary(air)
pre_med = median(air$Ozone , na.rm = TRUE)
ozo_mea = mean(air$Ozone , na.rm = TRUE)
ozo_mea
pre_med
air$Ozone = ifelse(is.na(air$Ozone) , ozo_mea , air$Ozone )
aft_med = median(air$Ozone)
print(aft_med - pre_med)
data("BostonHousing")
data = BostonHousing
data = sort(BostonHousing$medv)
head(BostonHousing)
head(data)
data = BostonHousing
?(arrange)
help(arrange)
data %>% arrange(aesc(medv))
data = head(sort(data$medv,decreasing = TRUE), 50)
data
data[50]
min = data[50]
data = BostonHousing
data$medv = ifelse(data$medv >= min , min , data$medv)
head(data)
result = data %>% filter(data$crim > 1.0)
result
data = iris
tr_idx = nrow(iris) * 0.7
data = iris[tr_idx,]
nrow(iris)
nrow(data)
tr_idx
data = iris[1:tr_idx,]
nrow(data)
head(data)
summary(data)
result = sd(data$Sepal.Length)
print(result)
data = mtcars$wt
data
head(data)
nrow(data)
sum = 0
min_wt = min(data)
min_wt
max_wt = max(data)
max_wt
length(data)
nrow(mtcars)
for (i in 1:32){
data[i] <- (data[i] - min_wt) / (max_wt -min_wt)
}
data
for (i in 1:32){
if(data[i] > 0.5)
{
sum<- sum+1
}
}
sum
print(sum)
data = iris
train
t_idx = nrow(iris) * 0.8
iris_train = iris[t_idx,]
iris_train = iris[1:t_idx,]
head(iris_train)
iris_test = iris[t_idx+1:,]
iris_test = iris[t_idx+1:nrow(iris),]
head(iris_test)
help(rpart)
rpart(Species~.,iris_train)
library(rpart)
rpart(Species~.,iris_train)
help(svm)
md_rp rpart(Species~.,iris_train)
md_rp = rpart(Species~.,iris_train)
md_svn = svm(Species~, iris_train)
md_svn = svm(Species~., iris_train)
help(predict)
rp_pr = predict(md_rp , iris_test)
svm_pr = predict(md_svn , iris_test)
svm_pr
confusionMatrix(data = svm_pr , reference = iris_test$Species)
length(svm_pr)
length(iris_test)
iris_test
Boston = BostonHousing
head(Boston)
b_good = head(sort(Boston$crim,descreasing = TRUE),10)
b_good = head(sort(Boston$crim,decreasing = TRUE),10)
b_good
top10th = b_good[10]
top10th
Boston$crim = ifelse(Boston$crim >= top10th , top10th,Boston$crim)
B_age = Boston %>% filter(Boston$age>=80)
B-age
B_age
mean(B_age$crim)
result = mean(B_age$crim)
print(result)
housing
library(housing)
